<?php

    namespace common\components\logger;

    use common\models\LogModel;
    use Yii;
    use yii\base\Component;
    use yii\base\Event;
    use yii\db\ActiveRecord;
    use yii\db\Exception;

    class LogComponent extends Component{
        public $a;

        public function init(){
            parent::init(); // TODO: Change the autogenerated stub
//            Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_INSERT, [self::className(), 'log'],
//                      ['action' => 'insert', 'user_id' => Yii::$app->user->id]);
//            Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_UPDATE, [self::className(), 'log'],
//                      ['action' => 'update', 'user_id' => Yii::$app->user->id]);
//            Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_DELETE, [self::className(), 'log'],
//                      ['action' => 'delete', 'user_id' => Yii::$app->user->id]);
        }

        public function log($event){
            /** @var ActiveRecord $sender */
            $sender = $event->sender;
            if($sender instanceof LogModel){
                return;
            }
            $initializer = current(Yii::$app->authManager->getRolesByUser($event->data['user_id']))->name;
            $log = new LogModel([
                                    'action'      => $event->data['action'],
                                    'action_data' => json_encode($sender->attributes),
                                    'initializer' => 'admin',
                                    'user_id'     => $event->data['user_id']
                                ]);
            if($log->save()){
                Yii::$app->session->setFlash('info', 'лог записан');
            }else{
                throw new Exception('error save logger');
            }
        }
    }