<?php

namespace common\models;

use common\models\forms\PasswordResetRequestForm;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%user}}".
 *
 * @property integer $id
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property ClientModel $client
 * @property CartModel[] $carts
 * @property LogModel[] $logs
 */
class User extends ActiveRecord
{

    /**
    * @inheritdoc
    */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['auth_key', 'password_hash', 'email'], 'required'],
            [['status', 'created_at', 'updated_at'], 'integer'],
            [['auth_key'], 'string', 'max' => 32],
            [['password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['email'], 'unique'],
            [['password_reset_token'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'auth_key' => 'Auth Key',
            'password_hash' => 'Password Hash',
            'password_reset_token' => 'Password Reset Token',
            'email' => Yii::t('models/user', 'Email'),
            'status' => Yii::t('models/user', 'Status'),
            'created_at' => Yii::t('models', 'Created'),
            'updated_at' => Yii::t('models', 'Last Update'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClient()
    {
        return $this->hasOne(ClientModel::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCarts()
    {
        return $this->hasMany(CartModel::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLogs()
    {
        return $this->hasMany(LogModel::className(), ['user_id' => 'id']);
    }

    public function setUserRole($rolename){
        $userRole = Yii::$app->authManager->getRole($rolename);
        $currentRole = Yii::$app->authManager->getRolesByUser($this->id);
        if($currentRole != null){
            if(current($currentRole)->name != $rolename){
                Yii::$app->authManager->revoke(current($currentRole), $this->id);
            }
            else{
                return true;
            }
        }
        Yii::$app->authManager->assign($userRole, $this->id);
        return true;
    }

    public function beforeValidate(){
        if($this->isNewRecord){
            $_userIdent = $this->setUserIdentity();

            $this->auth_key = $_userIdent->auth_key;
            $this->password_hash = $_userIdent->password_hash;
            $this->password_reset_token = $_userIdent->password_reset_token;
            $this->status = $_userIdent::STATUS_ACTIVE;

        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function setUserIdentity(){
        $_userIdent = new UserIdentity;
        $_userIdent->generateAuthKey();
        $_userIdent->setPassword(Yii::$app->security->generateRandomString(8));
        $_userIdent->generatePasswordResetToken();
        return $_userIdent;
    }

    public function afterSave($insert){
        //Нужна консультация
        $resets = new PasswordResetRequestForm(['email' => $this->email]);
        if(!$resets->sendEmail()){
            throw new \Exception('error send mail');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
